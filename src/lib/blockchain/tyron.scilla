(*
    TyronZIL-js: Decentralized identity client for the Zilliqa blockchain platform
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*)
scilla_version 0

(* The tyron library *)
library Tyron
  let mensaje =
    fun(msg: Message) =>
      let nil_msg = Nil{Message} in
      Cons{Message} msg nil_msg
  let payment_is_wrong: String = "The payment is not enough for the number of operations"
  let zero = Uint128 0
  let payment_is_right: String = "The payment is correct thus the tyron-smart-contract is being processed"

contract Tyron(
  (* Immutable fields declaration *)
  pungtas_address: ByStr20, (* the owner of the contract *)
  operation_cost: Uint128 (* equal to 1 ZIL *)
  )
  
  (* Mutable fields declaration *)
  field tyron_hash: String = ""
  field anchor_string: String = ""
  field client_address: ByStr20 = 0xccDdFAD074cd608B6B43e14eb3440240f5bFf087
  field ledger_time: BNum = BNum 999
  field sidetree_transaction_number: Uint128 = Uint128 0 (* a monotonically increasing number *)
  
  (* Updates the mutable state if the transaction is successful *)
  procedure updateState(tyronHash: String, sidetreeAnchor: String, block: BNum)
    tyron_hash := tyronHash;
    anchor_string := sidetreeAnchor;
    client_address := _sender;
    ledger_time := block;
    latest_tx_number <- sidetree_transaction_number;
      incrementor = Uint128 1;
      new_tx_number = builtin add latest_tx_number incrementor;
    sidetree_transaction_number := new_tx_number
  end
  
  transition ownYourData(tyronHash: String, sidetreeAnchor: String, count: Uint128)
    cost = builtin mul count operation_cost;
    payment_is_accepted = builtin eq _amount cost;
    
    match payment_is_accepted with
      | True =>
          accept;
          msg = {
            _tag: "";
            _recipient: _sender;
            _amount: zero;
            code: payment_is_right
          };
          reply = mensaje msg;
          send reply;
          block <- & BLOCKNUMBER;
          updateState tyronHash sidetreeAnchor block;
          tx_number <- sidetree_transaction_number;
          success = {
            _eventname: "tyronZIL transaction successful";
            sidetree_transaction_number: tx_number
          };
          event success
          
      | False => 
          msg = {
            _tag: "";
            _recipient: _sender;
            _amount: zero;
            code: payment_is_wrong
          };
          reply = mensaje msg;
          send reply
      end
end