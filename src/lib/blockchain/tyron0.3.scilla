(*
    TyronZIL-js: Decentralized identity client for the Zilliqa blockchain platform
    Copyright (C) 2020 Julio Cesar Cabrapan Duarte

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
*)

scilla_version 0

(*********************)
(* The tyron library *)
(*********************)

library Tyron
    (* Messages *)
    (************)
    let one_msg = 
        fun (msg: Message) => 
        let nil_msg = Nil { Message } in
        Cons { Message } msg nil_msg

    let two_msgs =
        fun (msg1: Message) =>
        fun (msg2: Message) =>
            let msgs_tmp = one_msg msg2 in
            Cons { Message } msg1 msgs_tmp

    (* Constants *)
    (*************)    
    let zero = Uint128 0
    let hundred = Uint128 100
    let created = "created"
    let updated = "updated"
    let recovered = "recovered"
    let deactivated = "deactivated"
    let undefined = "undefined"
  
    (* Error events *)
    (****************)
    type Error =
    | CodeNotTyron
    | CodeNotClient
    | CodeNotOwner
    | DidIsDeactivated
    | CodeWrongCommitment
    | CodeInsufficientFunds
    
    let make_error =
        fun (result : Error) =>
        let result_code = 
            match result with
            | CodeNotTyron              => Int32 -1
            | CodeNotClient             => Int32 -2
            | CodeNotOwner              => Int32 -3
            | DidIsDeactivated          => Int32 -4
            | CodeWrongCommitment       => Int32 -5
            | CodeInsufficientFunds     => Int32 -6
            end
        in
        { _exception : "Error"; code : result_code }

(****************************)
(* The tyron smart-contract *)
(****************************)

contract Tyron(
(* Immutable fields declaration *)
(********************************)
    tyron_init: ByStr20,        (* the address of the TyronInit contract *)
    contract_owner: ByStr20        (* the user is the owner of the contract *)
)
    with
        let init_contract = 0x2ec55313454c229f02cc03266b3df5dbc72cadde in
        builtin eq init_contract tyron_init
    =>

(* Mutable fields declaration *)
(******************************)
    field client_address: ByStr20 = 0xccDdFAD074cd608B6B43e14eb3440240f5bFf087
  (* defined by the TyronInit contract *)
    field operation_cost: Uint128 = Uint128 0   
    field foundation_address: ByStr20 = 0x45832badF26Bc3F66DA3b9eD242EA84AfFA024a3
    field client_commission: Uint128 = Uint128 0        (* % of the operation_cost *)       
  (* defined by the tyronZIL DID method *)
    field decentralized_identifier: String = ""
    field suffix_data: String = ""
    field signed_data: String = ""
    field delta: String = ""
  (* Sidetree public key commitments *)
    field update_commitment: String = ""
    field recovery_commitment: String = ""
  (* DID status & timestamp *)
    field status: String = ""
    field ledger_time: BNum = BNum 333
    field sidetree_transaction_number: Uint128 = Uint128 0 (* a monotonically increasing number *)
    
(* Procedures *)
(**************)

    procedure ThrowError(err: Error)
        e = make_error err;
        throw e
    end

    procedure IsTyron()
        is_tyron = builtin eq tyron_init _sender;
        match is_tyron with
        | True =>
        | False =>
            err = CodeNotTyron;
            ThrowError err
        end
    end

    procedure IsClient()
        this_client <- client_address;
        is_client = builtin eq this_client _sender;
        match is_client with
        | True =>
        | False =>
            err = CodeNotClient;
            ThrowError err
        end
    end
    
    procedure IsOwner()
        is_owner = builtin eq contract_owner _sender;
        match is_owner with
        | True =>
        | False =>
            err = CodeNotOwner;
            ThrowError err
        end
    end

    procedure IsDeactivated()
        this_status <- status;
        is_deactivated = builtin eq this_status deactivated;
        match is_deactivated with
        | True =>
            err = DidIsDeactivated;
            ThrowError err
        | False =>
        end
    end

    procedure IsCommitment(        (* Checks the validity of a commitment *)
        thisCommitment: String,
        givenCommitment: String
    )
        commitment_is_correct = builtin eq thisCommitment givenCommitment;
        match commitment_is_correct with
        | True =>
        | False =>
            err = CodeWrongCommitment;
            ThrowError err
        end
    end

    procedure Payment()
        this_cost <- operation_cost;
        payment_is_accepted = builtin eq _amount this_cost;
        match payment_is_accepted with
        | True =>
            accept;
          (* Pays the tyron client and the foundation, must be externally owned addresses *)
            this_client_commission <- client_commission;
            payment_to_client = 
                let temp = builtin div _amount hundred in
                builtin mul temp this_client_commission;
            payment_to_foundation = builtin sub _amount payment_to_client;
            msg_to_client = {
                _tag: "";
                _recipient: _sender;
                _amount: payment_to_client
            };
            this_foundation_address <- foundation_address;
            msg_to_foundation = {
                _tag: "";
                _recipient: this_foundation_address;
                _amount: payment_to_foundation
            };
            msgs = two_msgs msg_to_client msg_to_foundation;
            send msgs
        | False => 
            err = CodeInsufficientFunds;
            ThrowError err
        end
    end
    
    procedure Timestamp()
        block <- & BLOCKNUMBER;
        ledger_time := block;
        latest_tx_number <- sidetree_transaction_number;
        new_tx_number =
            let incrementor = Uint128 1 in
            builtin add latest_tx_number incrementor;
        sidetree_transaction_number := new_tx_number
    end

(* Transitions *)
(***************)

    transition ContractInit(
      clientAddress: ByStr20
    )
        IsOwner;
        client_address := clientAddress;
        msg_init = {
            _tag: "Initialize";
            _recipient: tyron_init;
            _amount: zero
        };
        init = one_msg msg_init;
        send init
    end

    transition InitParameters(
        operationCost: Uint128,
        foundationAddress: ByStr20,
        clientCommission: Uint128
    )
        IsTyron;
        operation_cost := operationCost;
        foundation_address := foundationAddress;
        client_commission := clientCommission
    end

    transition DidCreate(
        did: String,
        suffixData: String,
        encodedDelta: String,
        updateCommitment: String,
        recoveryCommitment: String
    )
        IsClient;
        IsDeactivated;
        Payment;
        decentralized_identifier := did;
        suffix_data := suffixData;
        delta := encodedDelta;
        update_commitment := updateCommitment;
        recovery_commitment := recoveryCommitment;
        status := created;
        Timestamp   
    end

    transition DidUpdate(
        updateCommitment: String,
        signedData: String,
        encodedDelta: String,
        newUpdateCommitment: String
    )
        IsClient;
        IsDeactivated;
        this_commitment <- update_commitment;
        IsCommitment this_commitment updateCommitment;
        Payment;
        signed_data := signedData;
        delta := encodedDelta;
        update_commitment := newUpdateCommitment;
        status := updated;
        Timestamp
    end

    transition DidRecover(
        recoveryCommitment: String,
        signedData: String,
        encodedDelta: String,
        newUpdateCommitment: String,
        newRecoveryCommitment: String
    )
        IsClient;
        IsDeactivated;
        this_commitment <- recovery_commitment;
        IsCommitment this_commitment recoveryCommitment;
        Payment;
        signed_data := signedData;
        delta := encodedDelta;
        update_commitment := newUpdateCommitment;
        recovery_commitment := newRecoveryCommitment;
        status := recovered;
        Timestamp
    end

    transition DidDeactivate(
        recoveryCommitment: String,
        signedData: String
    )
        IsClient;
        IsDeactivated;
        this_commitment <- recovery_commitment;
        IsCommitment this_commitment recoveryCommitment;
        Payment;
        signed_data := signedData;
        delta := undefined;
        update_commitment := undefined;
        recovery_commitment := undefined;
        status := deactivated;
        Timestamp
    end

    transition UpdateClient(newClientAddress: ByStr20)
        IsOwner;
        client_address := newClientAddress;
        e = {
            _eventname: "UpdatedClient";
            new_client_address: newClientAddress
        };
        event e
    end
